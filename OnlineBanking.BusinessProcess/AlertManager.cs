//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace OnlineBanking.BusinessProcess
{
    using OnlineBanking.DAL;
    using OnlineBanking.DataModel;
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;

    /// <summary>
    /// Manages the alerts transactions.
    /// </summary>
    public class AlertManager
    {
        /// <summary>
        /// sets up alerts on accounts.
        /// </summary>
        /// <param name="AlertData">The data that defines the alert, this is not yet specified.</param>
        /// <param name="AccountNumber">The account number that the alert will be set up for</param>
        /// <returns>the success status of the transaction</returns>
        public async virtual Task<bool> SetUpAccountAlerts(Alert alert, int customerID)
        {
            try
            {
                BankContext bankContext = new BankContext();
                Crypto crypto = new Crypto();
                alert.accountNumber = crypto.Encrypt(alert.accountNumber); // The account number coming in is not encrypted, encrypt it before doing the comparison
                bankContext.Alerts.Add(alert);
                int SaveResult = await bankContext.SaveChangesAsync();
                Account account;
                using (var context = new BankContext())
                {
                    account = await (context.CheckingAccounts.Where(c => c.accountNumber == alert.accountNumber && c.customerID == customerID).FirstOrDefaultAsync<Account>());
                    if (account == null)
                    {
                        account = await (context.SavingsAccounts.Where(s => s.accountNumber == alert.accountNumber).FirstOrDefaultAsync<Account>());
                    }
                    if (account != null)
                    {
                        context.AlertTransactions.Add(new AlertTransaction()
                        {
                            CustomerID = account.customerID,
                            status = "Success",
                            dateTime = DateTime.Now,
                            transactionType = Transaction.TransactionType.Alert,
                            accountNumber = alert.accountNumber,    // Encrypt the account number before storing
                            alertData = alert.alertData
                        });
                    }
                    else
                    {
                        context.AlertTransactions.Add(new AlertTransaction()
                        {
                            CustomerID = account.customerID,
                            status = "Fail",
                            dateTime = DateTime.Now,
                            transactionType = Transaction.TransactionType.Alert,
                            accountNumber = alert.accountNumber,    // Encrypt the account number before storing
                            alertData = alert.alertData
                        });
                    }
                    context.SaveChanges();
                }

            }
            catch (Exception)
            {
                throw new Exception("Error setting up the account alert.");
            }

            return alert.AlertID != 0;
        }

        public virtual IEnumerable<Alert> GetAccountAlerts(string accountNumber, int customerID)
        {
            BankContext context = new BankContext();
            IEnumerable<Alert> alerts = new List<Alert>();
            try
            {
                Crypto crypto = new Crypto();
                accountNumber = crypto.Encrypt(accountNumber);
                Account account = context.CheckingAccounts.Where(c => c.accountNumber == accountNumber && c.customerID == customerID).FirstOrDefault<Account>();
                if (account != null)
                {
                    alerts = context.Alerts.Where(a => a.accountNumber == accountNumber).AsEnumerable<Alert>();
                    foreach (Alert alert in alerts)
                    {
                        // Decrypt the account number before returning to the UI
                        alert.accountNumber = crypto.Decrypt(alert.accountNumber);
                    }
                }

            }
            catch (Exception)
            {
                throw new Exception("Error getting the account alerts.");
            }

            return alerts;
        }
    }
}

