//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace OnlineBanking.BusinessProcess
{
    using OnlineBanking.DataModel;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;

    /// <summary>
    /// Manages transactions that validate user ID/password (PIN) combinations.
    /// </summary>
	public class IDValidationManager 
	{
        /// <summary>
        /// Validate that the given user ID and Password (PIN) belong together. Note that since the ASP.Net Web application framework
        /// gives us login functionality, we should use that functionality rather than our own.
        /// </summary>
        /// <param name="Id">The customers user ID.</param>
        /// <param name="PWD">the customers password (PIN)</param>
        /// <returns></returns>
		public virtual bool Validate(string Id, string PWD)
		{
			throw new System.NotImplementedException();
		}

        /// <summary>
        /// Log the ID Validation transaction.
        /// </summary>
        /// <param name="Id">The customers user ID.</param>
        /// <param name="PWD">the customers password (PIN)</param>
        /// <returns></returns>
        public virtual int LogTransaction(int customerID, string status)
        {
            OnlineBanking.DAL.BankContext context = new DAL.BankContext();
            try
            {
                context.IDValidationTransactions.Add(new IDValidationTransaction()
                {
                    CustomerID = customerID,
                    status = status,
                    dateTime = DateTime.Now,
                    transactionType = Transaction.TransactionType.IDValidation
                });
                context.SaveChanges();
            }
            catch (Exception)
            {
                throw new Exception("Error logging the transaction.");
            }
            return 0; //Normally I would return the ID of the new record, but the ID is not important to the application.
        }
    }
}

