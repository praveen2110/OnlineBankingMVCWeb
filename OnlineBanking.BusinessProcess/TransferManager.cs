//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace OnlineBanking.BusinessProcess
{
    using OnlineBanking.DAL;
    using OnlineBanking.DataModel;
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;

    /// <summary>
    /// Manages transfer transactions.
    /// </summary>
    public class TransferManager 
    {
        /// <summary>
        /// Transfer funds from one account to another.
        /// </summary>
        /// <param name="fromAccountNumber">The account number for the account to transfer founds out of.</param>
        /// <param name="toAccountNumber">The account number for the account to transfer founds in to.</param>
        /// <param name="amount">The amount to transfer</param>
        /// <returns>The success status of the transaction.</returns>
        public async virtual Task<bool> Transfer(string fromAccountNumber, string toAccountNumber, Double amount, int customerID)
        {
            int SaveResult = 0;
            try
            {
                BankContext bankContext = new BankContext();
                Crypto crypto = new Crypto();

                fromAccountNumber = crypto.Encrypt(fromAccountNumber);
                toAccountNumber = crypto.Encrypt(toAccountNumber);
                CheckingAccount fromCAccount = new CheckingAccount();
                CheckingAccount toCAccount = new CheckingAccount();
                SavingsAccount fromSAccount = new SavingsAccount();
                SavingsAccount toSAccount = new SavingsAccount();
                Account fromAccount;
                Account toAccount;
                TransferTransaction transferTransaction;

                using (var context = new BankContext())
                {
                    fromCAccount = await (context.CheckingAccounts.Where(c => c.accountNumber == fromAccountNumber && c.customerID == customerID).FirstOrDefaultAsync<CheckingAccount>());
                    if (fromCAccount == null)
                    {
                        fromSAccount = await (context.SavingsAccounts.Where(c => c.accountNumber == fromAccountNumber && c.customerID == customerID).FirstOrDefaultAsync<SavingsAccount>());
                        fromAccount = fromSAccount;
                    }
                    else
                    {
                        fromAccount = fromCAccount;
                    }
                    if (fromAccount != null)
                    {
                        if (fromCAccount.balance >= amount)
                        {
                            toCAccount = await context.CheckingAccounts.Where(c => c.accountNumber == toAccountNumber && c.customerID == customerID).FirstOrDefaultAsync<CheckingAccount>();
                            if (toCAccount == null)
                            {
                                toSAccount = await context.SavingsAccounts.Where(c => c.accountNumber == toAccountNumber && c.customerID == customerID).FirstOrDefaultAsync<SavingsAccount>();
                                toAccount = toSAccount;
                            }
                            else
                            {
                                toAccount = toCAccount;
                            }
                            if (toAccount != null)
                            {
                                fromAccount.Debit(amount);
                                toAccount.Credit(amount);
                                transferTransaction = new TransferTransaction()
                                {
                                    transactionType = Transaction.TransactionType.Transfer,
                                    dateTime = DateTime.Now,
                                    amount = amount,
                                    fromAccountNumber = fromAccountNumber,
                                    toAccountNumber = toAccountNumber,
                                    status = "Success"
                                };
                                bankContext.TransferTransactions.Add(transferTransaction);
                            }
                            else // Invalid toAccount
                            {
                                LogFailedTransaction(fromAccountNumber, toAccountNumber, amount);
                                throw new Exception("The account that you are trying to transfer to could not be found.");
                            }
                        }
                        else // fromAccount insuficient balance 
                        {
                            LogFailedTransaction(fromAccountNumber, toAccountNumber, amount);
                            throw new Exception("The account that you are trying to transfer from has insufficent funds.");
                        }
                    }
                    else // Invailid from account
                    {
                        LogFailedTransaction(fromAccountNumber, toAccountNumber, amount);
                        throw new Exception("The account that you are trying to transfer from could not be found.");
                    }
                     // Set the state of the original records to Updated so that entity framework will update the database
                    if (fromAccount.isChecking)
                    {
                        fromCAccount.balance = fromAccount.balance;
                        //bankContext.Entry(fromCAccount).State = EntityState.Modified;
                   }
                    else
                    {
                        fromSAccount.balance = fromAccount.balance;
                        //bankContext.Entry(fromSAccount).State = EntityState.Modified;
                    }
                    if (toAccount.isChecking)
                    {
                        toCAccount.balance = toAccount.balance;
                        //bankContext.Entry(toCAccount).State = EntityState.Modified;
                    }
                    else
                    {
                        toSAccount.balance = toAccount.balance;
                        //bankContext.Entry(toSAccount).State = EntityState.Modified;
                    }
                    if (bankContext.ChangeTracker.HasChanges())
                    {
                        SaveResult = await bankContext.SaveChangesAsync();
                    }
                }
            }
            catch (Exception e)
            {
                string msg = e.Message;
                throw;
            }
            return SaveResult != 0;
        }

        private void LogFailedTransaction(string fromAccountNumber, string toAccountNumber, double amount) 
        {
            try
            {
                Crypto crypto = new Crypto();

                fromAccountNumber = crypto.Encrypt(fromAccountNumber);
                toAccountNumber = crypto.Encrypt(toAccountNumber);
                TransferTransaction transferTransaction = new TransferTransaction()
                {
                    transactionType = Transaction.TransactionType.Transfer,
                    dateTime = DateTime.Now,
                    amount = amount,
                    fromAccountNumber = fromAccountNumber,
                    toAccountNumber = toAccountNumber,
                    status = "Fail"
                };
            }
            catch (Exception)
            {
                throw new Exception("Error logging the transaction.");
            }
        }
    }
}

