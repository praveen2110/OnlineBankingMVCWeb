//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace OnlineBanking.BusinessProcess
{
    using OnlineBanking.DAL;
    using OnlineBanking.DataModel;
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;

    /// <summary>
    /// manages customer profile transactions.
    /// </summary>
	public class ProfileManager 
	{
        /// <summary>
        /// Read customer profile data from the data store.
        /// </summary>
        /// <param name="customerEmail">The ID of the customer to get the profile for.</param>
        /// <returns>the customer record.</returns>
		public async virtual Task<Customer> RequestCustomerProfile(string customerEmail)
		{
            Customer customer;
            try
            {
            using (var context = new BankContext())
            {
                customer = await context.Customers.Where(c => c.email == customerEmail).FirstOrDefaultAsync<Customer>();
                if (customer == null)
                {
                    context.ProfileTransactions.Add(new ProfileTransaction()
                    {
                        CustomerID = 0,
                        status = "Fail",
                        dateTime = DateTime.Now,
                        transactionType = Transaction.TransactionType.Statement
                    });
                }
                else
                {
                    IEnumerable<CheckingAccount> checkingAccounts = context.CheckingAccounts.Where(c => c.customerID == customer.customerID).ToList<CheckingAccount>();
                    IEnumerable<SavingsAccount> savingsAccounts = context.SavingsAccounts.Where(c => c.customerID == customer.customerID).ToList<SavingsAccount>();
                    customer.Accounts = (IEnumerable<Account>)checkingAccounts;
                    customer.Accounts = customer.Accounts.Union(savingsAccounts);
                    context.ProfileTransactions.Add(new ProfileTransaction()
                    {
                        CustomerID = customer.customerID,
                        status = "Success",
                        dateTime = DateTime.Now,
                        transactionType = Transaction.TransactionType.Statement
                    });
                }
                context.SaveChanges();
                Crypto crypto = new Crypto();
                foreach (Account account in customer.Accounts)
                {
                    account.accountNumber = crypto.Decrypt(account.accountNumber);
                }
            }
            }
            catch (Exception)
            {
                throw new Exception("Error getting the customer profile.");
            }
            return customer;
        }

        /// <summary>
        /// Update customer profile data in the data store.
        /// </summary>
        /// <param name="profileData">The customers profile data.</param>
        /// <returns>The status of the update transaction.</returns>
		public async virtual Task<bool> UpdateCustomerProfile(Customer customer)
		{
            try
            {
                BankContext bankContext = new BankContext();
                Customer DBcustomer;
                DBcustomer = await bankContext.Customers.Where(c => c.email == customer.email).FirstOrDefaultAsync<Customer>();
                if (DBcustomer != null)
                {
                    DBcustomer.address = customer.address;
                    DBcustomer.customerName = customer.customerName;
                    DBcustomer.phone = customer.phone;
                }
                else
                {
                    bankContext.Customers.Add(customer);
                }
                int SaveResult = await bankContext.SaveChangesAsync();
            }
            catch (Exception)
            {
                throw new Exception("Error updating the customer profile.");
            }
            return customer.customerID != 0;
        }

	}
}

