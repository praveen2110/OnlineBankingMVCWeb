//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace OnlineBanking.BusinessProcess
{
    using OnlineBanking.DAL;
    using OnlineBanking.DataModel;
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;

    /// <summary>
    /// Manages query transactions.
    /// </summary>
    public class QueryManager 
    {
        /// <summary>
        /// Returns the list of transactions between the given times and the current account balance.
        /// </summary>
        /// <param name="accountNumber">the account number to check.</param>
        /// <param name="fromTime">The begining time for transactions.</param>
        /// <param name="toTime">the ending time for transactions.</param>
        /// <returns>the list of transactions on the given account between the given times.</returns>
        public async virtual Task<Account> CheckAccount(string accountNumber, DateTime fromTime, DateTime toTime, int customerID)
        {
            Account account;
            try
            {
                Crypto crypto = new Crypto();
                accountNumber = crypto.Encrypt(accountNumber);
                using (var context = new BankContext())
                {
                    account = await (context.CheckingAccounts.Where(c => c.accountNumber == accountNumber && c.customerID == customerID).FirstOrDefaultAsync<Account>());
                    if (account == null)
                    {
                        account = await (context.SavingsAccounts.Where(s => s.accountNumber == accountNumber && s.customerID == customerID).FirstOrDefaultAsync<Account>());
                    }
                    if (account != null)
                    {
                        List<TransferTransaction> transferTransactions = (context.TransferTransactions.Where(t =>
                            (t.fromAccountNumber == accountNumber || t.toAccountNumber == accountNumber) && t.dateTime >= fromTime && t.dateTime <= toTime).AsEnumerable<TransferTransaction>()).ToList();

                        if (transferTransactions != null)
                        {
                            account.Statement = transferTransactions;
                        }
                        context.QueryTransactions.Add(new QueryTransaction()
                        {
                            CustomerID = account.customerID,
                            status = "Success",
                            dateTime = DateTime.Now,
                            transactionType = Transaction.TransactionType.IDValidation
                        });
                    }
                    else
                    {
                        context.QueryTransactions.Add(new QueryTransaction()
                        {
                            CustomerID = account.customerID,
                            status = "Fail",
                            dateTime = DateTime.Now,
                            transactionType = Transaction.TransactionType.IDValidation
                        });
                    }
                    await context.SaveChangesAsync();
                }
                account.accountNumber = crypto.Decrypt(account.accountNumber);
                foreach (TransferTransaction transaction in account.Statement)
            
                {
                        transaction.fromAccountNumber = crypto.Decrypt(transaction.fromAccountNumber);
                        transaction.toAccountNumber = crypto.Decrypt(transaction.toAccountNumber);
                }
            }
            catch (Exception)
            {
                throw new Exception("Error checking the account.");
            }
            return account;
        }




        /// <summary>
        /// Return the CheckImage record for a given transaction.
        ///  The design says to use a transaction ID, but the check is not related to a transaction.
        ///  So I am using the account number and the check sequence number.
        /// </summary>
        /// <param name="accountNumber">The account nuber that the check was drawn on.</param>
        /// <param name="checkNumber">The check sequence number. The design says to use a transaction ID, but the check is not related to a transaction.</param>
        /// <returns>the CheckImage record.</returns>
        public async virtual Task<CheckImage> RequestCheckImage(string accountNumber, string checkNumber )
        {
            Crypto crypto = new Crypto();
            CheckImage checkImage;
            try
            {
                accountNumber = crypto.Encrypt(accountNumber);
            using (var context = new BankContext())
            {
                checkImage = await (context.CheckImages.Where(c => c.accountNumber == accountNumber && c.checkNumber == checkNumber).FirstOrDefaultAsync<CheckImage>());
            if (checkImage != null)
            {
                Account account;                            // no need to encrypt or decrypt here, both values are encrypted
                account = await (context.CheckingAccounts.Where(c => c.accountNumber == checkImage.accountNumber).FirstOrDefaultAsync<Account>());
                if (account == null)
                {
                    account = await (context.SavingsAccounts.Where(s => s.accountNumber == checkImage.accountNumber).FirstOrDefaultAsync<Account>());
                }
                if (account != null)
                {
                    context.QueryTransactions.Add(new QueryTransaction()
                    {
                        CustomerID = account.customerID,
                        status = "Success",
                        dateTime = DateTime.Now,
                        transactionType = Transaction.TransactionType.CheckImage
                    });
                }
                else
                {
                    context.QueryTransactions.Add(new QueryTransaction()
                    {
                        CustomerID = account.customerID,
                        status = "Fail",
                        dateTime = DateTime.Now,
                        transactionType = Transaction.TransactionType.CheckImage
                    });
                }
            }
            else
                {
                    context.QueryTransactions.Add(new QueryTransaction()
                    {
                        CustomerID = 0,
                        status = "Fail",
                        dateTime = DateTime.Now,
                        transactionType = Transaction.TransactionType.CheckImage
                    });
                }

            await context.SaveChangesAsync();
            }
            checkImage.accountNumber = crypto.Decrypt(checkImage.accountNumber);
            }
            catch (Exception)
            {
                throw new Exception("Error getting the check image.");
            }
            return checkImage;
        }

    }
}

